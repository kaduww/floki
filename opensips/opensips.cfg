####################################################
# Floki RTP Relay tester                           #
# Opensips v3.3.x                                  #
# Author: Carlos Wagner (kaduww@gmail.com)         #
# Date: 2022-12-01                                 #
# TESTING PURPOSE ONLY, DO NOT RUN THIS SCRIPT IN  #
# A PRODUCTION ENVIRORMENT                         #
####################################################

log_level=3
xlog_level=3
log_stderror=no
log_facility=LOG_LOCAL0
debug_mode=no
dns_retr_no=0
dns_retr_time=0
dns_use_search_list=no
disable_dns_failover=yes
auto_aliases=no
udp_workers=8
mhomed=1
disable_503_translation=yes
server_header="Server: Floki"
user_agent_header="User-agent: Floki"
server_signature=yes

socket=udp:eth0:5060
socket=udp:eth1:5060

mpath="/lib64/opensips/modules/"
loadmodule "signaling.so"
loadmodule "proto_udp.so"
loadmodule "sl.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "uri.so"
loadmodule "topology_hiding.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "nathelper.so"

loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:localhost:2223")

loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 60)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

route{
	force_rport();
	if(nat_uac_test(19)){
		setflag(NATED);
		fix_nated_contact();
	}

	if (has_totag()){
		if(!topology_hiding_match()){
			if ( is_method("ACK") ) {
				if (t_check_trans() ) {
					t_relay();
				} else {
					xlog("L_WARN","ACK without matching transaction from=$fu request=$ru $ci");
				}
				exit;
			}
			sl_send_reply(404, "Not here");
			exit;
		}

		if ($DLG_status!=NULL && !validate_dialog()) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog");
		}

		if (is_method("BY|ECANCEL")){
			rtpengine_delete();
		}

			
		route(relay);
		exit;
	}

	if (is_method("CANCEL")){
		if (t_check_trans()){
			rtpengine_delete();
			t_relay();
			exit;
		}
	}
	t_check_trans();

	if(is_method("OPTIONS")) {
		sl_send_reply(200, "Ok");
		exit;
	}

	if(is_method("REGISTER")){
		fix_nated_register();
		save("location",'m');
	}

	if(is_method("INVITE")){
		create_dialog("B");
		topology_hiding("U");
		lookup("location");
		if(ISFLAGSET(NATED)){
			rtpengine_offer("SIP-source-address in-iface=wan out-iface=lan");
		}else{
			rtpengine_offer("in-iface=wan out-iface=lan");
		}
	}

	route(relay);
	exit;
}

route[relay] {
	t_on_failure("sip_failure");
	t_on_reply("sip_reply");
	t_relay();
	exit;
}

onreply_route[sip_reply] {
	if(nat_uac_test(19)){
		fix_nated_contact();
		rtpengine_offer("SIP-source-address");
	}else{
		rtpengine_offer();
	}
	exit;
}

failure_route[sip_failure] {
	if (t_was_cancelled()) {
		exit;
	}
	rtpengine_delete();
}

error_route {
	xlog("L_WARN","Malformed SIP request from user $fU from $si, code $(err.rcode) reason $(err.rreason)\n");
	exit;
}